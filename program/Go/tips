package tasks

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"regexp"
	"strings"
	"sync"
	"time"

	"github.com/yidane/nxin-bi/nxin-bi-etl/tasks/models"
)

//var configPath = "conf/task.json"
var configPath = "../nxin-bi-web/conf/task.json"
var lastModifiedTime time.Time
var tasks map[string]models.TaskInfo
var lock = new(sync.Mutex)

func readConfig() {
	f, err := os.Open(configPath)
	if err != nil {
		log.Println("open file error")
		os.Exit(2)
	}
	defer f.Close()

	fi, err := f.Stat()
	if err != nil {
		log.Println("stat fileinfo error")
		os.Exit(2)
	}

	lastTime := fi.ModTime()

	//判断上次修改时间，如果和缓存的时间一致，则不重复读取配置
	if lastTime == lastModifiedTime {
		return
	}

	log.Println("task.json last modify time is ", fi.ModTime())

	var n int64
	if size := fi.Size(); size < 1e9 {
		n = size
	}

	buf := bytes.NewBuffer(make([]byte, 0, n+bytes.MinRead))
	_, err = buf.ReadFrom(f)
	if err != nil {
		fmt.Println(err.Error())
		os.Exit(2)
	}

	fbytes := buf.Bytes()

	fstring := string(fbytes[:])
	reg := regexp.MustCompile(`/\*.*\*/`)
	fstring = reg.ReplaceAllString(fstring, "")
	fbytes = []byte(fstring)

	taskInfoList := []models.TaskInfo{}

	if err = json.Unmarshal(fbytes, &taskInfoList); err != nil {
		fmt.Println(err.Error())
		os.Exit(2)
	}

	tasks = make(map[string]models.TaskInfo)
	for i := 0; i < len(taskInfoList); i++ {
		taskInfo := taskInfoList[i]
		taskName := strings.ToLower(strings.TrimSpace(taskInfo.TaskName))
		if _, ok := tasks[taskInfo.TaskName]; ok {
			fmt.Println("存在重复的任务名称：", taskName)
			os.Exit(2)
		}

		if taskName != "" {
			tasks[taskName] = taskInfo
		}
	}

	if len(tasks) == 0 {
		log.Println("read TaskInfo from task.json,but get nothing")
		os.Exit(2)
	}

	lastModifiedTime = lastTime
}

var debugMode = true

func GetTaskInfo(taskName string) *models.TaskInfo {

	if debugMode {
		return nil
	}
	readConfig()
	taskName = strings.ToLower(strings.TrimSpace(taskName))
	if taskInfo, ok := tasks[taskName]; ok {
		return &taskInfo
	}

	return nil
}
